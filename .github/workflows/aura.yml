name: Python package

on:
  - push
  - workflow_dispatch

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      instanceid: ${{ steps.create.outputs.instanceid }}
      host: ${{ steps.create.outputs.host }}
      username: ${{ steps.create.outputs.username }}
      password: ${{ steps.create.outputs.password }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.1"

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install Aura CLI
        run: python -m pip install --upgrade aura-cli

      - name: Apply Credentials
        run: aura credentials add --name aura --client-id ${{ secrets.AURA_CLIENT_ID }} --client-secret ${{ secrets.AURA_CLIENT_SECRET }} --use

      - name: Create Instance
        id: create
        run: |
          json_output=$(aura instances create --name AuraIntegrationTests --cloud-provider ${{ secrets.AURA_CLOUD_PROVIDER }} --region ${{ secrets.AURA_REGION }} --type professional-db --tenant-id ${{ secrets.AURA_TENANT_ID }})
          instanceid=$(echo "$json_output" | jq -r '.id')
          host=$(echo "$json_output" | jq -r '.connection_url')
          username=$(echo "$json_output" | jq -r '.username')
          password=$(echo "$json_output" | jq -r '.password')
          echo $instanceid
          echo "instanceid=$instanceid" >> $GITHUB_OUTPUT
          echo "host=$host" >> $GITHUB_OUTPUT
          echo "username=$username" >> $GITHUB_OUTPUT
          echo "password=$password" >> $GITHUB_OUTPUT

      - name: Exists?
        run: aura instances get --instance-id ${{ steps.create.outputs.instanceid }}

      - name: Wait for instance
        run: |
          while true; do
            dbstatus=$(aura instances get --instance-id ${{ steps.create.outputs.instanceid }} | jq -r '.status')
            if [ "$dbstatus" = "running" ]; then
                echo "Status is running. Continuing..."
                break
            else
                echo "Status is $dbstatus. Waiting..."
                sleep 20
            fi
          done

  tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.9.0"
      - name: Run Tests
      - env:
          NEO4J_URI: ${{ needs.setup.outputs.host }}
          NEO4J_USERNAME: ${{ needs.setup.outputs.username }}
          NEO4J_PASSWORD: needs.setup.outputs.password
        run: |
          npm install --include=dev
          npm run test

  teardown:
    name: Teardown
    runs-on: ubuntu-latest
    needs:
      - setup
      - tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.1"

      - name: Install Aura CLI
        run: python -m pip install --upgrade aura-cli

      - name: Apply Credentials
        run: aura credentials add --name aura --client-id ${{ secrets.AURA_CLIENT_ID }} --client-secret ${{ secrets.AURA_CLIENT_SECRET }} --use

      - name: Delete Instance
        run: aura instances delete --instance-id ${{ needs.setup.outputs.instanceid }} --yes
